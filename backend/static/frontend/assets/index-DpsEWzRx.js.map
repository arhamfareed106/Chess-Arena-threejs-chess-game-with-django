{"version":3,"file":"index-DpsEWzRx.js","sources":["../../src/types/index.ts"],"sourcesContent":["export interface User {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  gamesPlayed: number;\r\n  gamesWon: number;\r\n  winRate: number;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface Player {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  isReady: boolean;\r\n  isHost: boolean;\r\n  isConnected: boolean;\r\n  investorCount: number;\r\n  playerToken: string;\r\n  pieces: Piece[];\r\n  createdAt: string;\r\n}\r\n\r\nexport interface Piece {\r\n  id: string;\r\n  pieceType: PieceType;\r\n  level: number;\r\n  positionX: number;\r\n  positionY: number;\r\n  transformCount: number;\r\n  temporaryBuffs: Record<string, any>;\r\n  isActive: boolean;\r\n  ownerName: string;\r\n  ownerColor: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport enum PieceType {\r\n  TALENT = 'talent',\r\n  LEADER = 'leader',\r\n  STRATEGIST = 'strategist',\r\n  INVESTOR = 'investor'\r\n}\r\n\r\nexport enum GameStatus {\r\n  WAITING = 'waiting',\r\n  ACTIVE = 'active',\r\n  FINISHED = 'finished',\r\n  ABANDONED = 'abandoned'\r\n}\r\n\r\nexport interface Game {\r\n  id: string;\r\n  name: string;\r\n  isPublic: boolean;\r\n  status: GameStatus;\r\n  turnCount: number;\r\n  noProgressTurns: number;\r\n  currentTurnPlayerName: string | null;\r\n  winnerName: string | null;\r\n  winner?: string; // For replay compatibility\r\n  movesCount: number;\r\n  players: Player[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  startedAt: string | null;\r\n  finishedAt: string | null;\r\n}\r\n\r\nexport interface Move {\r\n  id: string;\r\n  moveType: MoveType;\r\n  fromX: number;\r\n  fromY: number;\r\n  toX: number | null;\r\n  toY: number | null;\r\n  moveNumber: number;\r\n  moveData: Record<string, any>;\r\n  isValid: boolean;\r\n  validationErrors: string[];\r\n  playerName: string;\r\n  pieceType: string;\r\n  events: GameEvent[];\r\n  createdAt: string;\r\n}\r\n\r\nexport enum MoveType {\r\n  MOVE = 'move',\r\n  INVESTOR_TRANSFORM = 'investor_transform',\r\n  CAPTURE = 'capture',\r\n  PROMOTION = 'promotion'\r\n}\r\n\r\nexport interface GameEvent {\r\n  id: string;\r\n  eventType: EventType;\r\n  eventData: Record<string, any>;\r\n  createdAt: string;\r\n}\r\n\r\nexport enum EventType {\r\n  PIECE_CREATED = 'piece_created',\r\n  PIECE_MOVED = 'piece_moved',\r\n  PIECE_CAPTURED = 'piece_captured',\r\n  PIECE_TRANSFORMED = 'piece_transformed',\r\n  PIECE_PROMOTED = 'piece_promoted',\r\n  PIECE_PLACED = 'piece_placed',\r\n  INVESTOR_VULNERABLE = 'investor_vulnerable',\r\n  GAME_WON = 'game_won'\r\n}\r\n\r\nexport interface Position {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface MoveResult {\r\n  success: boolean;\r\n  moveId?: string;\r\n  playerId?: string;\r\n  from?: [number, number];\r\n  to?: [number, number];\r\n  events?: GameEvent[];\r\n  boardChanges?: BoardChange[];\r\n  winner?: string;\r\n  turn?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface BoardChange {\r\n  x: number;\r\n  y: number;\r\n  piece: string | null;\r\n}\r\n\r\nexport interface BoardState {\r\n  board: (Piece | null)[][];\r\n  players: Player[];\r\n  currentTurnPlayer: Player | null;\r\n  gameStatus: GameStatus;\r\n  turnCount: number;\r\n}\r\n\r\n// WebSocket message types\r\nexport interface WSMessage {\r\n  action: string;\r\n  data: Record<string, any>;\r\n}\r\n\r\nexport interface WSEvent {\r\n  event: string;\r\n  data: Record<string, any>;\r\n}\r\n\r\nexport interface JoinGameRequest {\r\n  playerName: string;\r\n  color?: string;\r\n  password?: string;\r\n}\r\n\r\nexport interface CreateGameRequest {\r\n  name: string;\r\n  isPublic: boolean;\r\n  password?: string;\r\n  hostName: string;\r\n}\r\n\r\nexport interface MoveRequest {\r\n  pieceId: string;\r\n  from: [number, number];\r\n  to: [number, number];\r\n  actionType?: 'move' | 'investor_transform';\r\n}\r\n\r\n// Camera and rendering types\r\nexport interface CameraState {\r\n  position: [number, number, number];\r\n  target: [number, number, number];\r\n  zoom: number;\r\n}\r\n\r\nexport enum CameraPreset {\r\n  TOP_DOWN = 'top-down',\r\n  ISOMETRIC = 'isometric',\r\n  SIDE_VIEW = 'side-view'\r\n}\r\n\r\n// UI State types\r\nexport interface GameUIState {\r\n  selectedPiece: Piece | null;\r\n  validMoves: Position[];\r\n  showMoveHistory: boolean;\r\n  showSettings: boolean;\r\n  cameraPreset: CameraPreset;\r\n  showGrid: boolean;\r\n  enableAnimations: boolean;\r\n}\r\n\r\n// Error types\r\nexport interface APIError {\r\n  message: string;\r\n  code?: string;\r\n  details?: Record<string, any>;\r\n}"],"names":["PieceType","GameStatus"],"mappings":"AAsCO,IAAKA,GAAAA,IACVA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,WAAa,aACbA,EAAA,SAAW,WAJDA,IAAAA,GAAA,CAAA,CAAA,EAOAC,GAAAA,IACVA,EAAA,QAAU,UACVA,EAAA,OAAS,SACTA,EAAA,SAAW,WACXA,EAAA,UAAY,YAJFA,IAAAA,GAAA,CAAA,CAAA"}