{"version":3,"file":"GameScene-CxlZgWho.js","sources":["../../src/three/Board.tsx","../../src/three/geometries.ts","../../src/three/Piece.tsx","../../src/three/CameraController.tsx","../../src/three/GameScene.tsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\r\n// import { useFrame } from '@react-three/fiber';\r\nimport { Text } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\ninterface BoardProps {\r\n  onSquareClick?: (x: number, y: number) => void;\r\n  highlightedSquares?: Array<{ x: number; y: number; color?: string }>;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({ onSquareClick, highlightedSquares = [] }) => {\r\n  const groupRef = useRef<THREE.Group>(null);\r\n\r\n  // Create board squares\r\n  const squares = useMemo(() => {\r\n    const result = [];\r\n    for (let x = 0; x < 8; x++) {\r\n      for (let y = 0; y < 8; y++) {\r\n        const isLight = (x + y) % 2 === 0;\r\n        const color = isLight ? '#f0d9b5' : '#b58863';\r\n        \r\n        result.push({\r\n          x,\r\n          y,\r\n          position: [x - 3.5, 0, y - 3.5] as [number, number, number],\r\n          color,\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }, []);\r\n\r\n  // Create highlight overlays\r\n  const highlights = useMemo(() => {\r\n    return highlightedSquares.map(({ x, y, color = '#00ff00' }) => ({\r\n      x,\r\n      y,\r\n      position: [x - 3.5, 0.01, y - 3.5] as [number, number, number],\r\n      color,\r\n    }));\r\n  }, [highlightedSquares]);\r\n\r\n  const handleSquareClick = (x: number, y: number) => {\r\n    if (onSquareClick) {\r\n      onSquareClick(x, y);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {/* Base board */}\r\n      <mesh position={[0, -0.05, 0]} receiveShadow>\r\n        <boxGeometry args={[8.2, 0.1, 8.2]} />\r\n        <meshStandardMaterial color=\"#654321\" />\r\n      </mesh>\r\n\r\n      {/* Board squares */}\r\n      {squares.map(({ x, y, position, color }) => (\r\n        <mesh\r\n          key={`${x}-${y}`}\r\n          position={position}\r\n          onClick={() => handleSquareClick(x, y)}\r\n          receiveShadow\r\n        >\r\n          <planeGeometry args={[0.98, 0.98]} />\r\n          <meshStandardMaterial color={color} />\r\n        </mesh>\r\n      ))}\r\n\r\n      {/* Highlight overlays */}\r\n      {highlights.map(({ x, y, position, color }) => (\r\n        <mesh key={`highlight-${x}-${y}`} position={position}>\r\n          <ringGeometry args={[0.3, 0.45, 16]} />\r\n          <meshBasicMaterial \r\n            color={color} \r\n            transparent \r\n            opacity={0.6}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      ))}\r\n\r\n      {/* Board coordinates */}\r\n      {/* Files (a-h) */}\r\n      {Array.from({ length: 8 }, (_, i) => (\r\n        <Text\r\n          key={`file-${i}`}\r\n          position={[i - 3.5, 0.01, -4.2]}\r\n          rotation={[-Math.PI / 2, 0, 0]}\r\n          fontSize={0.2}\r\n          color=\"#333\"\r\n          anchorX=\"center\"\r\n          anchorY=\"middle\"\r\n        >\r\n          {String.fromCharCode(97 + i)}\r\n        </Text>\r\n      ))}\r\n\r\n      {/* Ranks (1-8) */}\r\n      {Array.from({ length: 8 }, (_, i) => (\r\n        <Text\r\n          key={`rank-${i}`}\r\n          position={[-4.2, 0.01, i - 3.5]}\r\n          rotation={[-Math.PI / 2, 0, 0]}\r\n          fontSize={0.2}\r\n          color=\"#333\"\r\n          anchorX=\"center\"\r\n          anchorY=\"middle\"\r\n        >\r\n          {(8 - i).toString()}\r\n        </Text>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Board;","import * as THREE from 'three';\r\nimport { PieceType } from '@/types';\r\n\r\n// Basic geometric shapes for pieces\r\nexport const createTalentGeometry = (): THREE.BufferGeometry => {\r\n  return new THREE.ConeGeometry(0.3, 0.8, 8);\r\n};\r\n\r\nexport const createLeaderGeometry = (): THREE.BufferGeometry => {\r\n  return new THREE.CylinderGeometry(0.25, 0.35, 0.7, 8);\r\n};\r\n\r\nexport const createStrategistGeometry = (): THREE.BufferGeometry => {\r\n  return new THREE.OctahedronGeometry(0.4);\r\n};\r\n\r\nexport const createInvestorGeometry = (): THREE.BufferGeometry => {\r\n  const geometry = new THREE.SphereGeometry(0.35, 16, 12);\r\n  return geometry;\r\n};\r\n\r\nexport const getPieceGeometry = (pieceType: PieceType): THREE.BufferGeometry => {\r\n  switch (pieceType) {\r\n    case PieceType.TALENT:\r\n      return createTalentGeometry();\r\n    case PieceType.LEADER:\r\n      return createLeaderGeometry();\r\n    case PieceType.STRATEGIST:\r\n      return createStrategistGeometry();\r\n    case PieceType.INVESTOR:\r\n      return createInvestorGeometry();\r\n    default:\r\n      return createTalentGeometry();\r\n  }\r\n};\r\n\r\nexport const createPieceMaterial = (color: string, level: number): THREE.Material => {\r\n  const baseColor = new THREE.Color(color);\r\n  \r\n  // Adjust material properties based on level\r\n  const metalness = Math.min(0.2 + (level * 0.2), 0.8);\r\n  const roughness = Math.max(0.8 - (level * 0.15), 0.2);\r\n  \r\n  return new THREE.MeshStandardMaterial({\r\n    color: baseColor,\r\n    metalness,\r\n    roughness,\r\n    emissive: new THREE.Color(baseColor).multiplyScalar(0.1),\r\n  });\r\n};\r\n\r\nexport const createBoardGeometry = (): THREE.BufferGeometry => {\r\n  return new THREE.PlaneGeometry(8, 8);\r\n};\r\n\r\nexport const createSquareGeometry = (): THREE.BufferGeometry => {\r\n  return new THREE.PlaneGeometry(0.98, 0.98);\r\n};\r\n\r\nexport const createHighlightGeometry = (): THREE.BufferGeometry => {\r\n  return new THREE.RingGeometry(0.3, 0.45, 16);\r\n};","import React, { useRef, useState } from 'react';\r\nimport { useFrame, ThreeEvent } from '@react-three/fiber';\r\nimport { Text } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\nimport { Piece as PieceType, PieceType as PieceEnum } from '@/types';\r\nimport { getPieceGeometry, createPieceMaterial } from './geometries';\r\n\r\ninterface PieceProps {\r\n  piece: PieceType;\r\n  position: [number, number, number];\r\n  isSelected?: boolean;\r\n  isHighlighted?: boolean;\r\n  onClick?: (piece: PieceType) => void;\r\n  animateMove?: boolean;\r\n}\r\n\r\nconst Piece: React.FC<PieceProps> = ({\r\n  piece,\r\n  position,\r\n  isSelected = false,\r\n  isHighlighted = false,\r\n  onClick,\r\n  animateMove = true,\r\n}) => {\r\n  const meshRef = useRef<THREE.Mesh>(null);\r\n  const [hovered, setHovered] = useState(false);\r\n  const targetPosition = useRef(new THREE.Vector3(...position));\r\n  const currentPosition = useRef(new THREE.Vector3(...position));\r\n\r\n  // Update target position when prop changes\r\n  React.useEffect(() => {\r\n    targetPosition.current.set(...position);\r\n  }, [position]);\r\n\r\n  // Animate piece movement\r\n  useFrame(() => {\r\n    if (!meshRef.current || !animateMove) return;\r\n\r\n    // Smooth position interpolation\r\n    currentPosition.current.lerp(targetPosition.current, 0.1);\r\n    meshRef.current.position.copy(currentPosition.current);\r\n\r\n    // Floating animation for selected pieces\r\n    if (isSelected) {\r\n      const time = Date.now() * 0.002;\r\n      meshRef.current.position.y = position[1] + Math.sin(time) * 0.05 + 0.1;\r\n    }\r\n\r\n    // Hover effect\r\n    if (hovered) {\r\n      const scale = 1 + Math.sin(Date.now() * 0.005) * 0.05;\r\n      meshRef.current.scale.setScalar(scale);\r\n    } else {\r\n      meshRef.current.scale.lerp(new THREE.Vector3(1, 1, 1), 0.1);\r\n    }\r\n  });\r\n\r\n  const handleClick = (event: ThreeEvent<MouseEvent>) => {\r\n    event.stopPropagation();\r\n    if (onClick) {\r\n      onClick(piece);\r\n    }\r\n  };\r\n\r\n  const handlePointerOver = (event: ThreeEvent<PointerEvent>) => {\r\n    event.stopPropagation();\r\n    setHovered(true);\r\n    document.body.style.cursor = 'pointer';\r\n  };\r\n\r\n  const handlePointerOut = () => {\r\n    setHovered(false);\r\n    document.body.style.cursor = 'auto';\r\n  };\r\n\r\n  // Get geometry and material based on piece type and level\r\n  const geometry = getPieceGeometry(piece.pieceType as PieceEnum);\r\n  const material = createPieceMaterial(piece.ownerColor, piece.level);\r\n\r\n  return (\r\n    <group>\r\n      {/* Main piece mesh */}\r\n      <mesh\r\n        ref={meshRef}\r\n        geometry={geometry}\r\n        material={material}\r\n        position={position}\r\n        onClick={handleClick}\r\n        onPointerOver={handlePointerOver}\r\n        onPointerOut={handlePointerOut}\r\n        castShadow\r\n        receiveShadow\r\n      />\r\n\r\n      {/* Selection indicator */}\r\n      {isSelected && (\r\n        <mesh position={[position[0], 0.01, position[2]]}>\r\n          <ringGeometry args={[0.4, 0.5, 16]} />\r\n          <meshBasicMaterial\r\n            color=\"#ffff00\"\r\n            transparent\r\n            opacity={0.8}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      )}\r\n\r\n      {/* Highlight indicator */}\r\n      {isHighlighted && (\r\n        <mesh position={[position[0], 0.02, position[2]]}>\r\n          <ringGeometry args={[0.35, 0.4, 16]} />\r\n          <meshBasicMaterial\r\n            color=\"#00ff00\"\r\n            transparent\r\n            opacity={0.6}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      )}\r\n\r\n      {/* Level indicator */}\r\n      <Text\r\n        position={[position[0], position[1] + 0.8, position[2]]}\r\n        fontSize={0.15}\r\n        color={piece.ownerColor}\r\n        anchorX=\"center\"\r\n        anchorY=\"middle\"\r\n        outlineWidth={0.02}\r\n        outlineColor=\"#ffffff\"\r\n      >\r\n        L{piece.level}\r\n      </Text>\r\n\r\n      {/* Transform count indicator */}\r\n      {piece.transformCount > 0 && (\r\n        <group>\r\n          {Array.from({ length: piece.transformCount }, (_, i) => (\r\n            <mesh\r\n              key={i}\r\n              position={[\r\n                position[0] - 0.3 + i * 0.15,\r\n                position[1] + 0.6,\r\n                position[2],\r\n              ]}\r\n            >\r\n              <sphereGeometry args={[0.03]} />\r\n              <meshBasicMaterial color=\"#ffd700\" />\r\n            </mesh>\r\n          ))}\r\n        </group>\r\n      )}\r\n\r\n      {/* Special abilities indicator */}\r\n      {piece.pieceType === PieceEnum.INVESTOR && (\r\n        <mesh position={[position[0], position[1] + 1, position[2]]}>\r\n          <ringGeometry args={[0.1, 0.15, 8]} />\r\n          <meshBasicMaterial\r\n            color=\"#ff6b6b\"\r\n            transparent\r\n            opacity={0.8}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      )}\r\n\r\n      {piece.pieceType === PieceEnum.STRATEGIST && (\r\n        <mesh position={[position[0], position[1] + 1, position[2]]}>\r\n          <ringGeometry args={[0.1, 0.15, 6]} />\r\n          <meshBasicMaterial\r\n            color=\"#4ecdc4\"\r\n            transparent\r\n            opacity={0.8}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      )}\r\n\r\n      {/* Temporary buffs indicator */}\r\n      {Object.keys(piece.temporaryBuffs || {}).length > 0 && (\r\n        <mesh position={[position[0] + 0.4, position[1] + 0.5, position[2]]}>\r\n          <sphereGeometry args={[0.05]} />\r\n          <meshBasicMaterial\r\n            color=\"#ff9500\"\r\n            transparent\r\n            opacity={0.9}\r\n          />\r\n        </mesh>\r\n      )}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Piece;","import React, { useRef } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { PerspectiveCamera } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\ninterface CameraControllerProps {\r\n  preset: 'top-down' | 'isometric' | 'side-view';\r\n  target?: [number, number, number];\r\n  enableControls?: boolean;\r\n}\r\n\r\nconst CameraController: React.FC<CameraControllerProps> = ({\r\n  preset,\r\n  target = [0, 0, 0],\r\n  enableControls: _enableControls = true,\r\n}) => {\r\n  const cameraRef = useRef<THREE.PerspectiveCamera>(null);\r\n  const targetPosition = useRef(new THREE.Vector3());\r\n  const currentTarget = useRef(new THREE.Vector3(...target));\r\n\r\n  // Camera presets\r\n  const presets = {\r\n    'top-down': {\r\n      position: new THREE.Vector3(0, 12, 0.1),\r\n      lookAt: new THREE.Vector3(0, 0, 0),\r\n    },\r\n    'isometric': {\r\n      position: new THREE.Vector3(8, 8, 8),\r\n      lookAt: new THREE.Vector3(0, 0, 0),\r\n    },\r\n    'side-view': {\r\n      position: new THREE.Vector3(0, 4, 10),\r\n      lookAt: new THREE.Vector3(0, 0, 0),\r\n    },\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const preset_config = presets[preset];\r\n    targetPosition.current.copy(preset_config.position);\r\n    currentTarget.current.copy(preset_config.lookAt);\r\n  }, [preset]);\r\n\r\n  React.useEffect(() => {\r\n    currentTarget.current.set(...target);\r\n  }, [target]);\r\n\r\n  useFrame(() => {\r\n    if (!cameraRef.current) return;\r\n\r\n    // Smooth camera movement\r\n    cameraRef.current.position.lerp(targetPosition.current, 0.05);\r\n    cameraRef.current.lookAt(currentTarget.current);\r\n    cameraRef.current.updateProjectionMatrix();\r\n  });\r\n\r\n  return (\r\n    <PerspectiveCamera\r\n      ref={cameraRef}\r\n      makeDefault\r\n      fov={60}\r\n      near={0.1}\r\n      far={1000}\r\n      position={presets[preset].position.toArray()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CameraController;","import React, { Suspense } from 'react';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { OrbitControls, Environment, Grid } from '@react-three/drei';\r\n// import * as THREE from 'three';\r\n\r\nimport Board from './Board';\r\nimport Piece from './Piece';\r\nimport CameraController from './CameraController';\r\nimport { Piece as PieceType, Position } from '@/types';\r\n\r\ninterface GameSceneProps {\r\n  pieces: PieceType[];\r\n  selectedPiece?: PieceType | null;\r\n  validMoves?: Position[];\r\n  cameraPreset?: 'top-down' | 'isometric' | 'side-view';\r\n  showGrid?: boolean;\r\n  enableShadows?: boolean;\r\n  onPieceClick?: (piece: PieceType) => void;\r\n  onSquareClick?: (x: number, y: number) => void;\r\n}\r\n\r\nconst GameScene: React.FC<GameSceneProps> = ({\r\n  pieces,\r\n  selectedPiece,\r\n  validMoves = [],\r\n  cameraPreset = 'isometric',\r\n  showGrid = true,\r\n  enableShadows = true,\r\n  onPieceClick,\r\n  onSquareClick,\r\n}) => {\r\n  // Convert board coordinates to 3D world coordinates\r\n  const boardToWorld = (x: number, y: number): [number, number, number] => {\r\n    return [x - 3.5, 0.5, y - 3.5];\r\n  };\r\n\r\n  // Create highlight data for valid moves\r\n  const highlightedSquares = validMoves.map(move => ({\r\n    x: move.x,\r\n    y: move.y,\r\n    color: '#00ff0080',\r\n  }));\r\n\r\n  // Add selected piece highlight\r\n  if (selectedPiece) {\r\n    highlightedSquares.push({\r\n      x: selectedPiece.positionX,\r\n      y: selectedPiece.positionY,\r\n      color: '#ffff0080',\r\n    });\r\n  }\r\n\r\n  const handleSquareClick = (x: number, y: number) => {\r\n    if (onSquareClick) {\r\n      onSquareClick(x, y);\r\n    }\r\n  };\r\n\r\n  const handlePieceClick = (piece: PieceType) => {\r\n    if (onPieceClick) {\r\n      onPieceClick(piece);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      shadows={enableShadows}\r\n      camera={{ position: [8, 8, 8], fov: 60 }}\r\n      gl={{ \r\n        antialias: true, \r\n        alpha: true,\r\n        powerPreference: 'high-performance',\r\n      }}\r\n      dpr={[1, 2]}\r\n    >\r\n      <Suspense fallback={null}>\r\n        {/* Camera */}\r\n        <CameraController preset={cameraPreset} />\r\n        \r\n        {/* Controls */}\r\n        <OrbitControls\r\n          enablePan={true}\r\n          enableZoom={true}\r\n          enableRotate={true}\r\n          minDistance={3}\r\n          maxDistance={20}\r\n          maxPolarAngle={Math.PI / 2}\r\n          target={[0, 0, 0]}\r\n        />\r\n\r\n        {/* Lighting */}\r\n        <ambientLight intensity={0.4} />\r\n        <directionalLight\r\n          position={[10, 10, 10]}\r\n          intensity={1}\r\n          castShadow={enableShadows}\r\n          shadow-mapSize-width={2048}\r\n          shadow-mapSize-height={2048}\r\n          shadow-camera-far={50}\r\n          shadow-camera-left={-20}\r\n          shadow-camera-right={20}\r\n          shadow-camera-top={20}\r\n          shadow-camera-bottom={-20}\r\n        />\r\n        <directionalLight\r\n          position={[-5, 5, 5]}\r\n          intensity={0.3}\r\n        />\r\n\r\n        {/* Environment */}\r\n        <Environment preset=\"city\" background={false} />\r\n\r\n        {/* Grid */}\r\n        {showGrid && (\r\n          <Grid\r\n            position={[0, -0.1, 0]}\r\n            args={[20, 20]}\r\n            cellSize={1}\r\n            cellThickness={0.5}\r\n            cellColor=\"#ffffff\"\r\n            sectionSize={4}\r\n            sectionThickness={1}\r\n            sectionColor=\"#666666\"\r\n            fadeDistance={30}\r\n            fadeStrength={1}\r\n            infiniteGrid\r\n          />\r\n        )}\r\n\r\n        {/* Game Board */}\r\n        <Board\r\n          onSquareClick={handleSquareClick}\r\n          highlightedSquares={highlightedSquares}\r\n        />\r\n\r\n        {/* Game Pieces */}\r\n        {pieces.map(piece => (\r\n          <Piece\r\n            key={piece.id}\r\n            piece={piece}\r\n            position={boardToWorld(piece.positionX, piece.positionY)}\r\n            isSelected={selectedPiece?.id === piece.id}\r\n            isHighlighted={validMoves.some(move => \r\n              move.x === piece.positionX && move.y === piece.positionY\r\n            )}\r\n            onClick={handlePieceClick}\r\n          />\r\n        ))}\r\n\r\n        {/* Fog for depth perception */}\r\n        <fog attach=\"fog\" args={['#f0f0f0', 15, 30]} />\r\n      </Suspense>\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default GameScene;"],"names":["Board","onSquareClick","highlightedSquares","groupRef","useRef","squares","useMemo","result","x","y","color","highlights","handleSquareClick","jsxs","jsx","position","THREE.DoubleSide","_","i","Text","createTalentGeometry","THREE.ConeGeometry","createLeaderGeometry","THREE.CylinderGeometry","createStrategistGeometry","THREE.OctahedronGeometry","createInvestorGeometry","THREE.SphereGeometry","getPieceGeometry","pieceType","PieceType","createPieceMaterial","level","baseColor","THREE.Color","metalness","roughness","THREE.MeshStandardMaterial","Piece","piece","isSelected","isHighlighted","onClick","animateMove","meshRef","hovered","setHovered","useState","targetPosition","THREE.Vector3","currentPosition","React","useFrame","time","scale","handleClick","event","handlePointerOver","handlePointerOut","geometry","material","PieceEnum","CameraController","preset","target","_enableControls","cameraRef","currentTarget","presets","preset_config","PerspectiveCamera","GameScene","pieces","selectedPiece","validMoves","cameraPreset","showGrid","enableShadows","onPieceClick","boardToWorld","move","handlePieceClick","Canvas","Suspense","OrbitControls","Environment","Grid"],"mappings":"yOAUA,MAAMA,EAA8B,CAAC,CAAE,cAAAC,EAAe,mBAAAC,EAAqB,CAAA,KAAS,CAClF,MAAMC,EAAWC,EAAAA,OAAoB,IAAI,EAGnCC,EAAUC,EAAAA,QAAQ,IAAM,CAC5B,MAAMC,EAAS,CAAA,EACf,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,MAAMC,GADWF,EAAIC,GAAK,IAAM,EACR,UAAY,UAEpCF,EAAO,KAAK,CACV,EAAAC,EACA,EAAAC,EACA,SAAU,CAACD,EAAI,IAAK,EAAGC,EAAI,GAAG,EAC9B,MAAAC,CAAA,CACD,CACH,CAEF,OAAOH,CACT,EAAG,CAAA,CAAE,EAGCI,EAAaL,EAAAA,QAAQ,IAClBJ,EAAmB,IAAI,CAAC,CAAE,EAAAM,EAAG,EAAAC,EAAG,MAAAC,EAAQ,cAAiB,CAC9D,EAAAF,EACA,EAAAC,EACA,SAAU,CAACD,EAAI,IAAK,IAAMC,EAAI,GAAG,EACjC,MAAAC,CAAA,EACA,EACD,CAACR,CAAkB,CAAC,EAEjBU,EAAoB,CAACJ,EAAWC,IAAc,CAC9CR,GACFA,EAAcO,EAAGC,CAAC,CAEtB,EAEA,OACEI,EAAAA,KAAC,QAAA,CAAM,IAAKV,EAEV,SAAA,CAAAU,EAAAA,KAAC,OAAA,CAAK,SAAU,CAAC,EAAG,KAAO,CAAC,EAAG,cAAa,GAC1C,SAAA,CAAAC,EAAAA,IAAC,eAAY,KAAM,CAAC,IAAK,GAAK,GAAG,EAAG,EACpCA,EAAAA,IAAC,uBAAA,CAAqB,MAAM,SAAA,CAAU,CAAA,EACxC,EAGCT,EAAQ,IAAI,CAAC,CAAE,EAAAG,EAAG,EAAAC,EAAG,SAAAM,EAAU,MAAAL,KAC9BG,EAAAA,KAAC,OAAA,CAEC,SAAAE,EACA,QAAS,IAAMH,EAAkBJ,EAAGC,CAAC,EACrC,cAAa,GAEb,SAAA,CAAAK,EAAAA,IAAC,gBAAA,CAAc,KAAM,CAAC,IAAM,GAAI,EAAG,EACnCA,MAAC,wBAAqB,MAAAJ,CAAA,CAAc,CAAA,CAAA,EAN/B,GAAGF,CAAC,IAAIC,CAAC,EAAA,CAQjB,EAGAE,EAAW,IAAI,CAAC,CAAE,EAAAH,EAAG,EAAAC,EAAG,SAAAM,EAAU,MAAAL,CAAA,IACjCG,EAAAA,KAAC,OAAA,CAAiC,SAAAE,EAChC,SAAA,CAAAD,EAAAA,IAAC,gBAAa,KAAM,CAAC,GAAK,IAAM,EAAE,EAAG,EACrCA,EAAAA,IAAC,oBAAA,CACC,MAAAJ,EACA,YAAW,GACX,QAAS,GACT,KAAMM,CAAM,CAAA,CACd,CAAA,EAPS,aAAaR,CAAC,IAAIC,CAAC,EAQ9B,CACD,EAIA,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACQ,EAAGC,IAC7BJ,EAAAA,IAACK,EAAA,CAEC,SAAU,CAACD,EAAI,IAAK,IAAM,IAAI,EAC9B,SAAU,CAAC,CAAC,KAAK,GAAK,EAAG,EAAG,CAAC,EAC7B,SAAU,GACV,MAAM,OACN,QAAQ,SACR,QAAQ,SAEP,SAAA,OAAO,aAAa,GAAKA,CAAC,CAAA,EARtB,QAAQA,CAAC,EAAA,CAUjB,EAGA,MAAM,KAAK,CAAE,OAAQ,GAAK,CAACD,EAAGC,IAC7BJ,EAAAA,IAACK,EAAA,CAEC,SAAU,CAAC,KAAM,IAAMD,EAAI,GAAG,EAC9B,SAAU,CAAC,CAAC,KAAK,GAAK,EAAG,EAAG,CAAC,EAC7B,SAAU,GACV,MAAM,OACN,QAAQ,SACR,QAAQ,SAEN,UAAA,EAAIA,GAAG,SAAA,CAAS,EARb,QAAQA,CAAC,EAAA,CAUjB,CAAA,EACH,CAEJ,EC9GaE,EAAuB,IAC3B,IAAIC,EAAmB,GAAK,GAAK,CAAC,EAG9BC,EAAuB,IAC3B,IAAIC,EAAuB,IAAM,IAAM,GAAK,CAAC,EAGzCC,EAA2B,IAC/B,IAAIC,EAAyB,EAAG,EAG5BC,EAAyB,IACnB,IAAIC,EAAqB,IAAM,GAAI,EAAE,EAI3CC,EAAoBC,GAA+C,CAC9E,OAAQA,EAAA,CACN,KAAKC,EAAU,OACb,OAAOV,EAAA,EACT,KAAKU,EAAU,OACb,OAAOR,EAAA,EACT,KAAKQ,EAAU,WACb,OAAON,EAAA,EACT,KAAKM,EAAU,SACb,OAAOJ,EAAA,EACT,QACE,OAAON,EAAA,CAAqB,CAElC,EAEaW,EAAsB,CAACrB,EAAesB,IAAkC,CACnF,MAAMC,EAAY,IAAIC,EAAYxB,CAAK,EAGjCyB,EAAY,KAAK,IAAI,GAAOH,EAAQ,GAAM,EAAG,EAC7CI,EAAY,KAAK,IAAI,GAAOJ,EAAQ,IAAO,EAAG,EAEpD,OAAO,IAAIK,EAA2B,CACpC,MAAOJ,EACP,UAAAE,EACA,UAAAC,EACA,SAAU,IAAIF,EAAYD,CAAS,EAAE,eAAe,EAAG,CAAA,CACxD,CACH,ECjCMK,EAA8B,CAAC,CACnC,MAAAC,EACA,SAAAxB,EACA,WAAAyB,EAAa,GACb,cAAAC,EAAgB,GAChB,QAAAC,EACA,YAAAC,EAAc,EAChB,IAAM,CACJ,MAAMC,EAAUxC,EAAAA,OAAmB,IAAI,EACjC,CAACyC,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAK,EACtCC,EAAiB5C,EAAAA,OAAO,IAAI6C,EAAc,GAAGlC,CAAQ,CAAC,EACtDmC,EAAkB9C,EAAAA,OAAO,IAAI6C,EAAc,GAAGlC,CAAQ,CAAC,EAG7DoC,EAAM,UAAU,IAAM,CACpBH,EAAe,QAAQ,IAAI,GAAGjC,CAAQ,CACxC,EAAG,CAACA,CAAQ,CAAC,EAGbqC,EAAS,IAAM,CACb,GAAI,GAACR,EAAQ,SAAW,CAACD,GAOzB,IAJAO,EAAgB,QAAQ,KAAKF,EAAe,QAAS,EAAG,EACxDJ,EAAQ,QAAQ,SAAS,KAAKM,EAAgB,OAAO,EAGjDV,EAAY,CACd,MAAMa,EAAO,KAAK,IAAA,EAAQ,KAC1BT,EAAQ,QAAQ,SAAS,EAAI7B,EAAS,CAAC,EAAI,KAAK,IAAIsC,CAAI,EAAI,IAAO,EACrE,CAGA,GAAIR,EAAS,CACX,MAAMS,EAAQ,EAAI,KAAK,IAAI,KAAK,IAAA,EAAQ,IAAK,EAAI,IACjDV,EAAQ,QAAQ,MAAM,UAAUU,CAAK,CACvC,MACEV,EAAQ,QAAQ,MAAM,KAAK,IAAIK,EAAc,EAAG,EAAG,CAAC,EAAG,EAAG,EAE9D,CAAC,EAED,MAAMM,EAAeC,GAAkC,CACrDA,EAAM,gBAAA,EACFd,GACFA,EAAQH,CAAK,CAEjB,EAEMkB,EAAqBD,GAAoC,CAC7DA,EAAM,gBAAA,EACNV,EAAW,EAAI,EACf,SAAS,KAAK,MAAM,OAAS,SAC/B,EAEMY,EAAmB,IAAM,CAC7BZ,EAAW,EAAK,EAChB,SAAS,KAAK,MAAM,OAAS,MAC/B,EAGMa,EAAW/B,EAAiBW,EAAM,SAAsB,EACxDqB,EAAW7B,EAAoBQ,EAAM,WAAYA,EAAM,KAAK,EAElE,cACG,QAAA,CAEC,SAAA,CAAAzB,EAAAA,IAAC,OAAA,CACC,IAAK8B,EACL,SAAAe,EACA,SAAAC,EACA,SAAA7C,EACA,QAASwC,EACT,cAAeE,EACf,aAAcC,EACd,WAAU,GACV,cAAa,EAAA,CAAA,EAIdlB,GACC3B,EAAAA,KAAC,OAAA,CAAK,SAAU,CAACE,EAAS,CAAC,EAAG,IAAMA,EAAS,CAAC,CAAC,EAC7C,SAAA,CAAAD,EAAAA,IAAC,gBAAa,KAAM,CAAC,GAAK,GAAK,EAAE,EAAG,EACpCA,EAAAA,IAAC,oBAAA,CACC,MAAM,UACN,YAAW,GACX,QAAS,GACT,KAAME,CAAM,CAAA,CACd,EACF,EAIDyB,GACC5B,EAAAA,KAAC,OAAA,CAAK,SAAU,CAACE,EAAS,CAAC,EAAG,IAAMA,EAAS,CAAC,CAAC,EAC7C,SAAA,CAAAD,EAAAA,IAAC,gBAAa,KAAM,CAAC,IAAM,GAAK,EAAE,EAAG,EACrCA,EAAAA,IAAC,oBAAA,CACC,MAAM,UACN,YAAW,GACX,QAAS,GACT,KAAME,CAAM,CAAA,CACd,EACF,EAIFH,EAAAA,KAACM,EAAA,CACC,SAAU,CAACJ,EAAS,CAAC,EAAGA,EAAS,CAAC,EAAI,GAAKA,EAAS,CAAC,CAAC,EACtD,SAAU,IACV,MAAOwB,EAAM,WACb,QAAQ,SACR,QAAQ,SACR,aAAc,IACd,aAAa,UACd,SAAA,CAAA,IACGA,EAAM,KAAA,CAAA,CAAA,EAITA,EAAM,eAAiB,GACtBzB,EAAAA,IAAC,SACE,SAAA,MAAM,KAAK,CAAE,OAAQyB,EAAM,cAAA,EAAkB,CAACtB,EAAGC,IAChDL,EAAAA,KAAC,OAAA,CAEC,SAAU,CACRE,EAAS,CAAC,EAAI,GAAMG,EAAI,IACxBH,EAAS,CAAC,EAAI,GACdA,EAAS,CAAC,CAAA,EAGZ,SAAA,CAAAD,EAAAA,IAAC,iBAAA,CAAe,KAAM,CAAC,GAAI,CAAA,CAAG,EAC9BA,EAAAA,IAAC,oBAAA,CAAkB,MAAM,SAAA,CAAU,CAAA,CAAA,EAR9BI,CAAA,CAUR,EACH,EAIDqB,EAAM,YAAcsB,EAAU,UAC7BhD,EAAAA,KAAC,OAAA,CAAK,SAAU,CAACE,EAAS,CAAC,EAAGA,EAAS,CAAC,EAAI,EAAGA,EAAS,CAAC,CAAC,EACxD,SAAA,CAAAD,EAAAA,IAAC,gBAAa,KAAM,CAAC,GAAK,IAAM,CAAC,EAAG,EACpCA,EAAAA,IAAC,oBAAA,CACC,MAAM,UACN,YAAW,GACX,QAAS,GACT,KAAME,CAAM,CAAA,CACd,EACF,EAGDuB,EAAM,YAAcsB,EAAU,YAC7BhD,EAAAA,KAAC,OAAA,CAAK,SAAU,CAACE,EAAS,CAAC,EAAGA,EAAS,CAAC,EAAI,EAAGA,EAAS,CAAC,CAAC,EACxD,SAAA,CAAAD,EAAAA,IAAC,gBAAa,KAAM,CAAC,GAAK,IAAM,CAAC,EAAG,EACpCA,EAAAA,IAAC,oBAAA,CACC,MAAM,UACN,YAAW,GACX,QAAS,GACT,KAAME,CAAM,CAAA,CACd,EACF,EAID,OAAO,KAAKuB,EAAM,gBAAkB,CAAA,CAAE,EAAE,OAAS,GAChD1B,EAAAA,KAAC,OAAA,CAAK,SAAU,CAACE,EAAS,CAAC,EAAI,GAAKA,EAAS,CAAC,EAAI,GAAKA,EAAS,CAAC,CAAC,EAChE,SAAA,CAAAD,EAAAA,IAAC,iBAAA,CAAe,KAAM,CAAC,GAAI,CAAA,CAAG,EAC9BA,EAAAA,IAAC,oBAAA,CACC,MAAM,UACN,YAAW,GACX,QAAS,EAAA,CAAA,CACX,CAAA,CACF,CAAA,EAEJ,CAEJ,ECnLMgD,EAAoD,CAAC,CACzD,OAAAC,EACA,OAAAC,EAAS,CAAC,EAAG,EAAG,CAAC,EACjB,eAAgBC,EAAkB,EACpC,IAAM,CACJ,MAAMC,EAAY9D,EAAAA,OAAgC,IAAI,EAChD4C,EAAiB5C,EAAAA,OAAO,IAAI6C,CAAe,EAC3CkB,EAAgB/D,EAAAA,OAAO,IAAI6C,EAAc,GAAGe,CAAM,CAAC,EAGnDI,EAAU,CACd,WAAY,CACV,SAAU,IAAInB,EAAc,EAAG,GAAI,EAAG,EACtC,OAAQ,IAAIA,EAAc,EAAG,EAAG,CAAC,CAAA,EAEnC,UAAa,CACX,SAAU,IAAIA,EAAc,EAAG,EAAG,CAAC,EACnC,OAAQ,IAAIA,EAAc,EAAG,EAAG,CAAC,CAAA,EAEnC,YAAa,CACX,SAAU,IAAIA,EAAc,EAAG,EAAG,EAAE,EACpC,OAAQ,IAAIA,EAAc,EAAG,EAAG,CAAC,CAAA,CACnC,EAGF,OAAAE,EAAM,UAAU,IAAM,CACpB,MAAMkB,EAAgBD,EAAQL,CAAM,EACpCf,EAAe,QAAQ,KAAKqB,EAAc,QAAQ,EAClDF,EAAc,QAAQ,KAAKE,EAAc,MAAM,CACjD,EAAG,CAACN,CAAM,CAAC,EAEXZ,EAAM,UAAU,IAAM,CACpBgB,EAAc,QAAQ,IAAI,GAAGH,CAAM,CACrC,EAAG,CAACA,CAAM,CAAC,EAEXZ,EAAS,IAAM,CACRc,EAAU,UAGfA,EAAU,QAAQ,SAAS,KAAKlB,EAAe,QAAS,GAAI,EAC5DkB,EAAU,QAAQ,OAAOC,EAAc,OAAO,EAC9CD,EAAU,QAAQ,uBAAA,EACpB,CAAC,EAGCpD,EAAAA,IAACwD,EAAA,CACC,IAAKJ,EACL,YAAW,GACX,IAAK,GACL,KAAM,GACN,IAAK,IACL,SAAUE,EAAQL,CAAM,EAAE,SAAS,QAAA,CAAQ,CAAA,CAGjD,EC5CMQ,EAAsC,CAAC,CAC3C,OAAAC,EACA,cAAAC,EACA,WAAAC,EAAa,CAAA,EACb,aAAAC,EAAe,YACf,SAAAC,EAAW,GACX,cAAAC,EAAgB,GAChB,aAAAC,EACA,cAAA7E,CACF,IAAM,CAEJ,MAAM8E,EAAe,CAACvE,EAAWC,IACxB,CAACD,EAAI,IAAK,GAAKC,EAAI,GAAG,EAIzBP,EAAqBwE,EAAW,IAAIM,IAAS,CACjD,EAAGA,EAAK,EACR,EAAGA,EAAK,EACR,MAAO,WAAA,EACP,EAGEP,GACFvE,EAAmB,KAAK,CACtB,EAAGuE,EAAc,UACjB,EAAGA,EAAc,UACjB,MAAO,WAAA,CACR,EAGH,MAAM7D,EAAoB,CAACJ,EAAWC,IAAc,CAC9CR,GACFA,EAAcO,EAAGC,CAAC,CAEtB,EAEMwE,EAAoB1C,GAAqB,CACzCuC,GACFA,EAAavC,CAAK,CAEtB,EAEA,OACEzB,EAAAA,IAACoE,EAAA,CACC,QAASL,EACT,OAAQ,CAAE,SAAU,CAAC,EAAG,EAAG,CAAC,EAAG,IAAK,EAAA,EACpC,GAAI,CACF,UAAW,GACX,MAAO,GACP,gBAAiB,kBAAA,EAEnB,IAAK,CAAC,EAAG,CAAC,EAEV,SAAAhE,EAAAA,KAACsE,EAAAA,SAAA,CAAS,SAAU,KAElB,SAAA,CAAArE,EAAAA,IAACgD,EAAA,CAAiB,OAAQa,CAAA,CAAc,EAGxC7D,EAAAA,IAACsE,EAAA,CACC,UAAW,GACX,WAAY,GACZ,aAAc,GACd,YAAa,EACb,YAAa,GACb,cAAe,KAAK,GAAK,EACzB,OAAQ,CAAC,EAAG,EAAG,CAAC,CAAA,CAAA,EAIlBtE,EAAAA,IAAC,eAAA,CAAa,UAAW,EAAA,CAAK,EAC9BA,EAAAA,IAAC,mBAAA,CACC,SAAU,CAAC,GAAI,GAAI,EAAE,EACrB,UAAW,EACX,WAAY+D,EACZ,uBAAsB,KACtB,wBAAuB,KACvB,oBAAmB,GACnB,qBAAoB,IACpB,sBAAqB,GACrB,oBAAmB,GACnB,uBAAsB,GAAA,CAAA,EAExB/D,EAAAA,IAAC,mBAAA,CACC,SAAU,CAAC,GAAI,EAAG,CAAC,EACnB,UAAW,EAAA,CAAA,EAIbA,EAAAA,IAACuE,EAAA,CAAY,OAAO,OAAO,WAAY,GAAO,EAG7CT,GACC9D,EAAAA,IAACwE,EAAA,CACC,SAAU,CAAC,EAAG,IAAM,CAAC,EACrB,KAAM,CAAC,GAAI,EAAE,EACb,SAAU,EACV,cAAe,GACf,UAAU,UACV,YAAa,EACb,iBAAkB,EAClB,aAAa,UACb,aAAc,GACd,aAAc,EACd,aAAY,EAAA,CAAA,EAKhBxE,EAAAA,IAACd,EAAA,CACC,cAAeY,EACf,mBAAAV,CAAA,CAAA,EAIDsE,EAAO,IAAIjC,GACVzB,EAAAA,IAACwB,EAAA,CAEC,MAAAC,EACA,SAAUwC,EAAaxC,EAAM,UAAWA,EAAM,SAAS,EACvD,YAAYkC,GAAA,YAAAA,EAAe,MAAOlC,EAAM,GACxC,cAAemC,EAAW,QACxBM,EAAK,IAAMzC,EAAM,WAAayC,EAAK,IAAMzC,EAAM,SAAA,EAEjD,QAAS0C,CAAA,EAPJ1C,EAAM,EAAA,CASd,EAGDzB,MAAC,OAAI,OAAO,MAAM,KAAM,CAAC,UAAW,GAAI,EAAE,CAAA,CAAG,CAAA,CAAA,CAC/C,CAAA,CAAA,CAGN"}