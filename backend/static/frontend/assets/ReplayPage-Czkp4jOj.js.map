{"version":3,"file":"ReplayPage-Czkp4jOj.js","sources":["../../src/pages/ReplayPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  Box,\r\n  Paper,\r\n  Slider,\r\n  LinearProgress,\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  PlayArrow as PlayIcon,\r\n  Pause as PauseIcon,\r\n  SkipNext as SkipNextIcon,\r\n  SkipPrevious as SkipPreviousIcon,\r\n  Replay as ReplayIcon,\r\n} from '@mui/icons-material';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nimport GameScene from '@/three/GameScene';\r\nimport { Move, Piece, Game, PieceType } from '@/types';\r\nimport gameService from '@/services/gameService';\r\n\r\nconst ReplayPage: React.FC = () => {\r\n  const { gameId } = useParams<{ gameId: string }>();\r\n  const navigate = useNavigate();\r\n\r\n  const [game, setGame] = useState<Game | null>(null);\r\n  const [moves, setMoves] = useState<Move[]>([]);\r\n  const [pieces, setPieces] = useState<Piece[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Replay controls\r\n  const [currentMoveIndex, setCurrentMoveIndex] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [playbackSpeed, setPlaybackSpeed] = useState(1000); // ms between moves\r\n\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n\r\n    const loadReplayData = async () => {\r\n      try {\r\n        const replayData = await gameService.getGameReplay(gameId);\r\n        setGame({\r\n          id: replayData.game_id,\r\n          name: `Replay of ${replayData.game_id.slice(0, 8)}`,\r\n          players: replayData.players,\r\n          moves: replayData.moves,\r\n          winner: replayData.winner,\r\n          createdAt: replayData.created_at,\r\n          finishedAt: replayData.finished_at,\r\n        } as Game);\r\n        \r\n        setMoves(replayData.moves || []);\r\n        \r\n        // Initialize with starting positions\r\n        initializePieces(replayData.players);\r\n        \r\n      } catch (error) {\r\n        console.error('Failed to load replay data:', error);\r\n        toast.error('Failed to load replay');\r\n        navigate('/');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadReplayData();\r\n  }, [gameId, navigate]);\r\n\r\n  // Auto-play functionality\r\n  useEffect(() => {\r\n    if (!isPlaying || currentMoveIndex >= moves.length) {\r\n      setIsPlaying(false);\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      handleNextMove();\r\n    }, playbackSpeed);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [isPlaying, currentMoveIndex, moves.length, playbackSpeed]);\r\n\r\n  // Update board state when move index changes\r\n  useEffect(() => {\r\n    updateBoardToMoveIndex(currentMoveIndex);\r\n  }, [currentMoveIndex, moves]);\r\n\r\n  const initializePieces = (players: any[]) => {\r\n    const initialPieces: Piece[] = [];\r\n    \r\n    // Create starting pieces based on standard TI Chess setup\r\n    players.forEach((player, playerIndex) => {\r\n      const yPosition = playerIndex === 0 ? 1 : 6;\r\n      \r\n      for (let x = 0; x < 8; x++) {\r\n        initialPieces.push({\r\n          id: `${player.id}-piece-${x}`,\r\n          pieceType: PieceType.TALENT,\r\n          level: 1,\r\n          positionX: x,\r\n          positionY: yPosition,\r\n          transformCount: 0,\r\n          temporaryBuffs: {},\r\n          isActive: true,\r\n          ownerName: player.name,\r\n          ownerColor: player.color,\r\n          createdAt: '',\r\n          updatedAt: '',\r\n        });\r\n      }\r\n    });\r\n    \r\n    setPieces(initialPieces);\r\n  };\r\n\r\n  const updateBoardToMoveIndex = (moveIndex: number) => {\r\n    // This would reconstruct the board state at the given move\r\n    // For now, we'll use a simplified approach\r\n    \r\n    if (moveIndex === 0) {\r\n      // Reset to initial position\r\n      if (game?.players) {\r\n        initializePieces(game.players);\r\n      }\r\n      return;\r\n    }\r\n\r\n    // Apply moves up to the current index\r\n    // This is simplified - in a real implementation, you'd replay all moves\r\n    // from the beginning to reconstruct the exact board state\r\n    \r\n    setPieces(prevPieces => {\r\n      const newPieces = [...prevPieces];\r\n      const currentMove = moves[moveIndex - 1];\r\n      \r\n      if (currentMove) {\r\n        // Find and update the piece that moved\r\n        const pieceIndex = newPieces.findIndex(p => \r\n          p.positionX === currentMove.fromX && \r\n          p.positionY === currentMove.fromY\r\n        );\r\n        \r\n        if (pieceIndex !== -1 && currentMove.toX !== null && currentMove.toY !== null) {\r\n          // Check for captures\r\n          const capturedIndex = newPieces.findIndex(p => \r\n            p.positionX === currentMove.toX && \r\n            p.positionY === currentMove.toY\r\n          );\r\n          \r\n          if (capturedIndex !== -1) {\r\n            newPieces.splice(capturedIndex, 1);\r\n          }\r\n          \r\n          // Move the piece\r\n          newPieces[pieceIndex] = {\r\n            ...newPieces[pieceIndex],\r\n            positionX: currentMove.toX,\r\n            positionY: currentMove.toY,\r\n          };\r\n        }\r\n      }\r\n      \r\n      return newPieces;\r\n    });\r\n  };\r\n\r\n  const handlePlayPause = () => {\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const handleNextMove = () => {\r\n    if (currentMoveIndex < moves.length) {\r\n      setCurrentMoveIndex(prev => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handlePreviousMove = () => {\r\n    if (currentMoveIndex > 0) {\r\n      setCurrentMoveIndex(prev => prev - 1);\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setCurrentMoveIndex(0);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const handleMoveSliderChange = (event: Event, newValue: number | number[]) => {\r\n    setCurrentMoveIndex(newValue as number);\r\n    setIsPlaying(false);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"loading-spinner mx-auto mb-4\"></div>\r\n          <Typography variant=\"h6\" className=\"text-white\">\r\n            Loading replay...\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!game || moves.length === 0) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"text-center text-white\">\r\n          <Typography variant=\"h5\" className=\"mb-4\">\r\n            No replay data available\r\n          </Typography>\r\n          <Button onClick={handleBack}>\r\n            Return to Lobby\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentMove = currentMoveIndex > 0 ? moves[currentMoveIndex - 1] : null;\r\n  const progress = moves.length > 0 ? (currentMoveIndex / moves.length) * 100 : 0;\r\n\r\n  return (\r\n    <Box className=\"h-screen flex flex-col bg-gray-900\">\r\n      {/* Header */}\r\n      <Paper \r\n        className=\"flex items-center justify-between p-4\"\r\n        sx={{ background: 'rgba(255,255,255,0.95)', zIndex: 10 }}\r\n      >\r\n        <Box className=\"flex items-center gap-2\">\r\n          <IconButton onClick={handleBack}>\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" className=\"font-bold\">\r\n            Game Replay\r\n          </Typography>\r\n        </Box>\r\n        \r\n        <Box className=\"text-right\">\r\n          <Typography variant=\"h6\">\r\n            {game.name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" className=\"text-gray-600\">\r\n            Move {currentMoveIndex} of {moves.length}\r\n          </Typography>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Game Scene */}\r\n      <Box className=\"flex-1 relative\">\r\n        <GameScene\r\n          pieces={pieces}\r\n          cameraPreset=\"isometric\"\r\n          showGrid={true}\r\n        />\r\n\r\n        {/* Current Move Info */}\r\n        {currentMove && (\r\n          <Paper \r\n            className=\"absolute top-4 left-4 p-3\"\r\n            sx={{ background: 'rgba(255,255,255,0.9)', minWidth: 200 }}\r\n          >\r\n            <Typography variant=\"h6\" className=\"mb-2\">\r\n              Move {currentMoveIndex}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>Player:</strong> {currentMove.playerName}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>Piece:</strong> {currentMove.pieceType}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              <strong>From:</strong> ({currentMove.fromX}, {currentMove.fromY})\r\n            </Typography>\r\n            {currentMove.toX !== null && currentMove.toY !== null && (\r\n              <Typography variant=\"body2\">\r\n                <strong>To:</strong> ({currentMove.toX}, {currentMove.toY})\r\n              </Typography>\r\n            )}\r\n          </Paper>\r\n        )}\r\n\r\n        {/* Game Info */}\r\n        <Paper \r\n          className=\"absolute top-4 right-4 p-3\"\r\n          sx={{ background: 'rgba(255,255,255,0.9)', minWidth: 250 }}\r\n        >\r\n          <Typography variant=\"h6\" className=\"mb-2\">\r\n            Players\r\n          </Typography>\r\n          {game.players.map(player => (\r\n            <Box key={player.id} className=\"flex items-center gap-2 mb-1\">\r\n              <div\r\n                className=\"w-4 h-4 rounded-full border\"\r\n                style={{ backgroundColor: player.color }}\r\n              />\r\n              <Typography variant=\"body2\">{player.name}</Typography>\r\n            </Box>\r\n          ))}\r\n          \r\n          {game.winner && (\r\n            <Box className=\"mt-3 p-2 bg-green-100 rounded\">\r\n              <Typography variant=\"body2\" className=\"font-semibold\">\r\n                Winner: {game.winner.name}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Paper>\r\n      </Box>\r\n\r\n      {/* Replay Controls */}\r\n      <Paper className=\"p-4\" sx={{ background: 'rgba(255,255,255,0.95)' }}>\r\n        <Box className=\"mb-4\">\r\n          <LinearProgress \r\n            variant=\"determinate\" \r\n            value={progress} \r\n            sx={{ height: 8, borderRadius: 4 }}\r\n          />\r\n        </Box>\r\n        \r\n        <Box className=\"flex items-center gap-4\">\r\n          {/* Control buttons */}\r\n          <Box className=\"flex items-center gap-2\">\r\n            <IconButton onClick={handleRestart}>\r\n              <ReplayIcon />\r\n            </IconButton>\r\n            \r\n            <IconButton \r\n              onClick={handlePreviousMove}\r\n              disabled={currentMoveIndex === 0}\r\n            >\r\n              <SkipPreviousIcon />\r\n            </IconButton>\r\n            \r\n            <IconButton onClick={handlePlayPause}>\r\n              {isPlaying ? <PauseIcon /> : <PlayIcon />}\r\n            </IconButton>\r\n            \r\n            <IconButton \r\n              onClick={handleNextMove}\r\n              disabled={currentMoveIndex >= moves.length}\r\n            >\r\n              <SkipNextIcon />\r\n            </IconButton>\r\n          </Box>\r\n\r\n          {/* Move slider */}\r\n          <Box className=\"flex-1 mx-4\">\r\n            <Slider\r\n              value={currentMoveIndex}\r\n              onChange={handleMoveSliderChange}\r\n              min={0}\r\n              max={moves.length}\r\n              step={1}\r\n              marks={[\r\n                { value: 0, label: 'Start' },\r\n                { value: moves.length, label: 'End' },\r\n              ]}\r\n            />\r\n          </Box>\r\n\r\n          {/* Speed control */}\r\n          <Box className=\"w-32\">\r\n            <Typography variant=\"caption\" className=\"block\">\r\n              Speed: {(2000 / playbackSpeed).toFixed(1)}x\r\n            </Typography>\r\n            <Slider\r\n              value={2000 / playbackSpeed}\r\n              onChange={(e, value) => setPlaybackSpeed(2000 / (value as number))}\r\n              min={0.5}\r\n              max={4}\r\n              step={0.5}\r\n              size=\"small\"\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ReplayPage;"],"names":["ReplayPage","gameId","useParams","navigate","useNavigate","game","setGame","useState","moves","setMoves","pieces","setPieces","loading","setLoading","currentMoveIndex","setCurrentMoveIndex","isPlaying","setIsPlaying","playbackSpeed","setPlaybackSpeed","useEffect","replayData","gameService","initializePieces","error","toast","timer","handleNextMove","updateBoardToMoveIndex","players","initialPieces","player","playerIndex","yPosition","x","PieceType","moveIndex","prevPieces","newPieces","currentMove","pieceIndex","p","capturedIndex","handlePlayPause","prev","handlePreviousMove","handleRestart","handleMoveSliderChange","event","newValue","handleBack","jsxs","jsx","Typography","Button","progress","Box","Paper","IconButton","ArrowBackIcon","GameScene","LinearProgress","ReplayIcon","SkipPreviousIcon","PauseIcon","PlayIcon","SkipNextIcon","Slider","e","value"],"mappings":"kYA0BA,MAAMA,GAAuB,IAAM,CACjC,KAAM,CAAE,OAAAC,CAAA,EAAWC,EAAA,EACbC,EAAWC,EAAA,EAEX,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAAsB,IAAI,EAC5C,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAiB,CAAA,CAAE,EACvC,CAACG,EAAQC,CAAS,EAAIJ,EAAAA,SAAkB,CAAA,CAAE,EAC1C,CAACK,EAASC,CAAU,EAAIN,EAAAA,SAAS,EAAI,EAGrC,CAACO,EAAkBC,CAAmB,EAAIR,EAAAA,SAAS,CAAC,EACpD,CAACS,EAAWC,CAAY,EAAIV,EAAAA,SAAS,EAAK,EAC1C,CAACW,EAAeC,CAAgB,EAAIZ,EAAAA,SAAS,GAAI,EAEvDa,EAAAA,UAAU,IAAM,CACd,GAAI,CAACnB,EAAQ,QAEU,SAAY,CACjC,GAAI,CACF,MAAMoB,EAAa,MAAMC,EAAY,cAAcrB,CAAM,EACzDK,EAAQ,CACN,GAAIe,EAAW,QACf,KAAM,aAAaA,EAAW,QAAQ,MAAM,EAAG,CAAC,CAAC,GACjD,QAASA,EAAW,QACpB,MAAOA,EAAW,MAClB,OAAQA,EAAW,OACnB,UAAWA,EAAW,WACtB,WAAYA,EAAW,WAAA,CAChB,EAETZ,EAASY,EAAW,OAAS,EAAE,EAG/BE,EAAiBF,EAAW,OAAO,CAErC,OAASG,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAClDC,EAAM,MAAM,uBAAuB,EACnCtB,EAAS,GAAG,CACd,QAAA,CACEU,EAAW,EAAK,CAClB,CACF,GAEA,CACF,EAAG,CAACZ,EAAQE,CAAQ,CAAC,EAGrBiB,EAAAA,UAAU,IAAM,CACd,GAAI,CAACJ,GAAaF,GAAoBN,EAAM,OAAQ,CAClDS,EAAa,EAAK,EAClB,MACF,CAEA,MAAMS,EAAQ,WAAW,IAAM,CAC7BC,EAAA,CACF,EAAGT,CAAa,EAEhB,MAAO,IAAM,aAAaQ,CAAK,CACjC,EAAG,CAACV,EAAWF,EAAkBN,EAAM,OAAQU,CAAa,CAAC,EAG7DE,EAAAA,UAAU,IAAM,CACdQ,EAAuBd,CAAgB,CACzC,EAAG,CAACA,EAAkBN,CAAK,CAAC,EAE5B,MAAMe,EAAoBM,GAAmB,CAC3C,MAAMC,EAAyB,CAAA,EAG/BD,EAAQ,QAAQ,CAACE,EAAQC,IAAgB,CACvC,MAAMC,EAAYD,IAAgB,EAAI,EAAI,EAE1C,QAASE,EAAI,EAAGA,EAAI,EAAGA,IACrBJ,EAAc,KAAK,CACjB,GAAI,GAAGC,EAAO,EAAE,UAAUG,CAAC,GAC3B,UAAWC,EAAU,OACrB,MAAO,EACP,UAAWD,EACX,UAAWD,EACX,eAAgB,EAChB,eAAgB,CAAA,EAChB,SAAU,GACV,UAAWF,EAAO,KAClB,WAAYA,EAAO,MACnB,UAAW,GACX,UAAW,EAAA,CACZ,CAEL,CAAC,EAEDpB,EAAUmB,CAAa,CACzB,EAEMF,EAA0BQ,GAAsB,CAIpD,GAAIA,IAAc,EAAG,CAEf/B,GAAA,MAAAA,EAAM,SACRkB,EAAiBlB,EAAK,OAAO,EAE/B,MACF,CAMAM,EAAU0B,GAAc,CACtB,MAAMC,EAAY,CAAC,GAAGD,CAAU,EAC1BE,EAAc/B,EAAM4B,EAAY,CAAC,EAEvC,GAAIG,EAAa,CAEf,MAAMC,EAAaF,EAAU,aAC3BG,EAAE,YAAcF,EAAY,OAC5BE,EAAE,YAAcF,EAAY,KAAA,EAG9B,GAAIC,IAAe,IAAMD,EAAY,MAAQ,MAAQA,EAAY,MAAQ,KAAM,CAE7E,MAAMG,EAAgBJ,EAAU,aAC9BG,EAAE,YAAcF,EAAY,KAC5BE,EAAE,YAAcF,EAAY,GAAA,EAG1BG,IAAkB,IACpBJ,EAAU,OAAOI,EAAe,CAAC,EAInCJ,EAAUE,CAAU,EAAI,CACtB,GAAGF,EAAUE,CAAU,EACvB,UAAWD,EAAY,IACvB,UAAWA,EAAY,GAAA,CAE3B,CACF,CAEA,OAAOD,CACT,CAAC,CACH,EAEMK,EAAkB,IAAM,CAC5B1B,EAAa,CAACD,CAAS,CACzB,EAEMW,EAAiB,IAAM,CACvBb,EAAmBN,EAAM,QAC3BO,EAAoB6B,GAAQA,EAAO,CAAC,CAExC,EAEMC,EAAqB,IAAM,CAC3B/B,EAAmB,GACrBC,EAAoB6B,GAAQA,EAAO,CAAC,CAExC,EAEME,EAAgB,IAAM,CAC1B/B,EAAoB,CAAC,EACrBE,EAAa,EAAK,CACpB,EAEM8B,EAAyB,CAACC,EAAcC,IAAgC,CAC5ElC,EAAoBkC,CAAkB,EACtChC,EAAa,EAAK,CACpB,EAEMiC,EAAa,IAAM,CACvB/C,EAAS,GAAG,CACd,EAEA,GAAIS,EACF,aACG,MAAA,CAAI,UAAU,gDACb,SAAAuC,EAAAA,KAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAI,UAAU,8BAAA,CAA+B,QAC7CC,EAAA,CAAW,QAAQ,KAAK,UAAU,aAAa,SAAA,mBAAA,CAEhD,CAAA,CAAA,CACF,CAAA,CACF,EAIJ,GAAI,CAAChD,GAAQG,EAAM,SAAW,EAC5B,aACG,MAAA,CAAI,UAAU,gDACb,SAAA2C,EAAAA,KAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAC,MAACC,EAAA,CAAW,QAAQ,KAAK,UAAU,OAAO,SAAA,2BAE1C,EACAD,EAAAA,IAACE,EAAA,CAAO,QAASJ,EAAY,SAAA,iBAAA,CAE7B,CAAA,CAAA,CACF,CAAA,CACF,EAIJ,MAAMX,EAAczB,EAAmB,EAAIN,EAAMM,EAAmB,CAAC,EAAI,KACnEyC,EAAW/C,EAAM,OAAS,EAAKM,EAAmBN,EAAM,OAAU,IAAM,EAE9E,OACE2C,EAAAA,KAACK,EAAA,CAAI,UAAU,qCAEb,SAAA,CAAAL,EAAAA,KAACM,EAAA,CACC,UAAU,wCACV,GAAI,CAAE,WAAY,yBAA0B,OAAQ,EAAA,EAEpD,SAAA,CAAAN,EAAAA,KAACK,EAAA,CAAI,UAAU,0BACb,SAAA,CAAAJ,MAACM,EAAA,CAAW,QAASR,EACnB,SAAAE,MAACO,IAAc,EACjB,QACCN,EAAA,CAAW,QAAQ,KAAK,UAAU,YAAY,SAAA,aAAA,CAE/C,CAAA,EACF,EAEAF,EAAAA,KAACK,EAAA,CAAI,UAAU,aACb,SAAA,CAAAJ,EAAAA,IAACC,EAAA,CAAW,QAAQ,KACjB,SAAAhD,EAAK,KACR,EACA8C,EAAAA,KAACE,EAAA,CAAW,QAAQ,QAAQ,UAAU,gBAAgB,SAAA,CAAA,QAC9CvC,EAAiB,OAAKN,EAAM,MAAA,CAAA,CACpC,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,EAIF2C,EAAAA,KAACK,EAAA,CAAI,UAAU,kBACb,SAAA,CAAAJ,EAAAA,IAACQ,EAAA,CACC,OAAAlD,EACA,aAAa,YACb,SAAU,EAAA,CAAA,EAIX6B,GACCY,EAAAA,KAACM,EAAA,CACC,UAAU,4BACV,GAAI,CAAE,WAAY,wBAAyB,SAAU,GAAA,EAErD,SAAA,CAAAN,EAAAA,KAACE,EAAA,CAAW,QAAQ,KAAK,UAAU,OAAO,SAAA,CAAA,QAClCvC,CAAA,EACR,EACAqC,EAAAA,KAACE,EAAA,CAAW,QAAQ,QAClB,SAAA,CAAAD,EAAAA,IAAC,UAAO,SAAA,SAAA,CAAO,EAAS,IAAEb,EAAY,UAAA,EACxC,EACAY,EAAAA,KAACE,EAAA,CAAW,QAAQ,QAClB,SAAA,CAAAD,EAAAA,IAAC,UAAO,SAAA,QAAA,CAAM,EAAS,IAAEb,EAAY,SAAA,EACvC,EACAY,EAAAA,KAACE,EAAA,CAAW,QAAQ,QAClB,SAAA,CAAAD,EAAAA,IAAC,UAAO,SAAA,OAAA,CAAK,EAAS,KAAGb,EAAY,MAAM,KAAGA,EAAY,MAAM,GAAA,EAClE,EACCA,EAAY,MAAQ,MAAQA,EAAY,MAAQ,MAC/CY,EAAAA,KAACE,EAAA,CAAW,QAAQ,QAClB,SAAA,CAAAD,EAAAA,IAAC,UAAO,SAAA,KAAA,CAAG,EAAS,KAAGb,EAAY,IAAI,KAAGA,EAAY,IAAI,GAAA,CAAA,CAC5D,CAAA,CAAA,CAAA,EAMNY,EAAAA,KAACM,EAAA,CACC,UAAU,6BACV,GAAI,CAAE,WAAY,wBAAyB,SAAU,GAAA,EAErD,SAAA,CAAAL,MAACC,EAAA,CAAW,QAAQ,KAAK,UAAU,OAAO,SAAA,UAE1C,EACChD,EAAK,QAAQ,OACZ8C,OAACK,EAAA,CAAoB,UAAU,+BAC7B,SAAA,CAAAJ,EAAAA,IAAC,MAAA,CACC,UAAU,8BACV,MAAO,CAAE,gBAAiBrB,EAAO,KAAA,CAAM,CAAA,EAEzCqB,EAAAA,IAACC,EAAA,CAAW,QAAQ,QAAS,WAAO,IAAA,CAAK,CAAA,GALjCtB,EAAO,EAMjB,CACD,EAEA1B,EAAK,QACJ+C,EAAAA,IAACI,EAAA,CAAI,UAAU,gCACb,SAAAL,EAAAA,KAACE,EAAA,CAAW,QAAQ,QAAQ,UAAU,gBAAgB,SAAA,CAAA,WAC3ChD,EAAK,OAAO,IAAA,CAAA,CACvB,CAAA,CACF,CAAA,CAAA,CAAA,CAEJ,EACF,EAGA8C,OAACM,GAAM,UAAU,MAAM,GAAI,CAAE,WAAY,0BACvC,SAAA,CAAAL,EAAAA,IAACI,EAAA,CAAI,UAAU,OACb,SAAAJ,EAAAA,IAACS,EAAA,CACC,QAAQ,cACR,MAAON,EACP,GAAI,CAAE,OAAQ,EAAG,aAAc,CAAA,CAAE,CAAA,EAErC,EAEAJ,EAAAA,KAACK,EAAA,CAAI,UAAU,0BAEb,SAAA,CAAAL,EAAAA,KAACK,EAAA,CAAI,UAAU,0BACb,SAAA,CAAAJ,MAACM,EAAA,CAAW,QAASZ,EACnB,SAAAM,MAACU,IAAW,EACd,EAEAV,EAAAA,IAACM,EAAA,CACC,QAASb,EACT,SAAU/B,IAAqB,EAE/B,eAACiD,EAAA,CAAA,CAAiB,CAAA,CAAA,EAGpBX,EAAAA,IAACM,EAAA,CAAW,QAASf,EAClB,SAAA3B,QAAagD,EAAA,CAAA,CAAU,EAAKZ,EAAAA,IAACa,EAAA,CAAA,CAAS,CAAA,CACzC,EAEAb,EAAAA,IAACM,EAAA,CACC,QAAS/B,EACT,SAAUb,GAAoBN,EAAM,OAEpC,eAAC0D,EAAA,CAAA,CAAa,CAAA,CAAA,CAChB,EACF,EAGAd,EAAAA,IAACI,EAAA,CAAI,UAAU,cACb,SAAAJ,EAAAA,IAACe,EAAA,CACC,MAAOrD,EACP,SAAUiC,EACV,IAAK,EACL,IAAKvC,EAAM,OACX,KAAM,EACN,MAAO,CACL,CAAE,MAAO,EAAG,MAAO,OAAA,EACnB,CAAE,MAAOA,EAAM,OAAQ,MAAO,KAAA,CAAM,CACtC,CAAA,EAEJ,EAGA2C,EAAAA,KAACK,EAAA,CAAI,UAAU,OACb,SAAA,CAAAL,EAAAA,KAACE,EAAA,CAAW,QAAQ,UAAU,UAAU,QAAQ,SAAA,CAAA,WACrC,IAAOnC,GAAe,QAAQ,CAAC,EAAE,GAAA,EAC5C,EACAkC,EAAAA,IAACe,EAAA,CACC,MAAO,IAAOjD,EACd,SAAU,CAACkD,EAAGC,IAAUlD,EAAiB,IAAQkD,CAAgB,EACjE,IAAK,GACL,IAAK,EACL,KAAM,GACN,KAAK,OAAA,CAAA,CACP,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ"}